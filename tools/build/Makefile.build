
# disabled make's built-in rules and built-in variables, and suppress the Enter/Leave message
# since we'll always stay in the root directory when recursing
MAKEFLAGS		+= -rR --no-print-directory

always-y		:=	# targets that are always build
obj-y			:=	# targets to be built and included in the in-target
subdir-y		:=	# subdirectories to be built recursively
#lib-y			:=
libex-y			:=	# external libraries to include when linking
extra-y			:=	# extra targets to build 
userprogs		:=	# user programs to compile
ccflags-y		:=
asflags-y		:=
ldflags-y		:=
objprefix		:= $(OUTPUT)$(dir)/

targets			:=

userprog-ccflags-y	:=	# CFLAGS for userprograms only
firmware-ccflags-y	:=	# CFLAGS for firmwares only (monitor, boot)
kernel-ccflags-y	:=	# CFLAGS for the kernel only

include $(kconfig-file)

SRCARCH			:= $(patsubst "%",%,$(CONFIG_ARCH))
GCC_PREFIX		:= $(patsubst "%",%,$(CONFIG_GCC_PREFIX))

include $(src-root)/tools/build/Makefile.defaults

ifeq ($(shell test -e $(build-file) && echo yes),)
    $(error Missing build file $(build-file))
endif

# This will be the first rule to run if none is provided on the command line
all:

include $(build-file)

#subdir-y		+= $(patsubst %/,%, $(filter %/, $(obj-y)))
obj-y			:= $(patsubst %/,%/built-in.o, $(obj-y))
#subdir-obj-y		:= $(filter %/built-in.o, $(obj-y))

# Executables compiled from a single .c file
user-csingle		:= $(foreach m, $(userprogs), $(if $($(m)-objs),,$(m)))

# Executables linked based on several .o files
user-cmulti		:= $(foreach m, $(userprogs), $(if $($(m)-objs),$(m)))


# Add prefix to all applicable targets
obj-y			:= $(addprefix $(objprefix),$(obj-y))
#subdir-obj-y		:= $(addprefix $(objprefix),$(subdir-obj-y))
in-target		:= $(objprefix)built-in.o
user-csingle		:= $(addprefix $(objprefix),$(user-csingle))
user-cmulti		:= $(addprefix $(objprefix),$(user-cmulti))
always-y		:= $(addprefix $(objprefix),$(always-y))
extra-y			:= $(addprefix $(objprefix),$(extra-y))

subdir-y		:= $(addprefix $(dir)/,$(subdir-y))
libex-obj-y		:= $(addprefix $(OUTPUT),$(libex-y))

targets			:= $(subdir-y) $(always-y) $(user-csingle) $(user-cmulti) $(MAKECMDGOALS)

PHONY += all
all: $(targets)

$(in-target): $(libex-y) $(obj-y) $(extra-y) $(build-file)
	$(LD) -r -o $@ $(obj-y) $(libex-obj-y)

PHONY += $(subdir-y)
$(subdir-y):
	$(MAKE) -f $(src-root)/tools/build/Makefile.build dir=$@

$(libex-y): FORCE
	$(MAKE) -f $(src-root)/tools/build/Makefile.build dir=$(patsubst %/,%,$(dir $@))


# Build Rules for User Programs
$(user-csingle): ccflags-y += $(userprog-ccflags-y)
$(user-csingle): $(OUTPUT)$(dir)/%.elf: $(OUTPUT)$(dir)/%.o $(libex-obj-y)
	$(cmd_ld_elf)

$(user-cmulti): ccflags-y += $(userprog-ccflags-y)
$(user-cmulti): $(OUTPUT)$(dir)/%.elf: $(OUTPUT)$(dir)/%/built-in.o $(libex-obj-y)
	$(cmd_ld_elf)

$(OUTPUT)%.strip: $(OUTPUT)%.elf
	$(STRIP) $< -o $@
	$(OBJCOPY) -O binary -j .text -j .got -j .rodata -j .data $< $@


# Generic Build Rules
$(OUTPUT)%.load: $(OUTPUT)%.bin
	tools/make-load-file $< $@ $(LOAD_ARGS)

$(OUTPUT)%.send: $(OUTPUT)%.bin
	tools/make-send-file $< $@

$(OUTPUT)%.bin: $(OUTPUT)%.elf
	$(cmd_ld_bin)

#.PRECIOUS: $(OUTPUT)%.elf
$(OUTPUT)%/$(notdir $(dir)).elf: $(OUTPUT)%/built-in.o
	$(cmd_ld_elf)

$(OUTPUT)%/built-in.o: FORCE
	$(MAKE) -f $(src-root)/tools/build/Makefile.build dir=$* $@

$(OUTPUT)%.a:
	$(AR) rcs $@ $^

$(OUTPUT)%.o: %.c
	$(cmd_cc_o)

$(OUTPUT)%.o: %.S
	$(cmd_as_o)

# Commands
cmd_ld_elf = $(LD) $(CFLAGS) $(ccflags-y) $(LDFLAGS) $(ldflags-y) -o $@ $^
cmd_ld_bin = $(LD) $(CFLAGS) $(ccflags-y) $(LDFLAGS) $(ldflags-y) -Wl,--oformat=binary -o $@ $^
cmd_cc_o = $(CC) $(CFLAGS) $(ccflags-y) -c -o $@ $<
cmd_as_o = $(AS) $(ASFLAGS) $(asflags-y) -c -o $@ $<


obj-dirs := $(sort $(patsubst %/,%, $(dir $(targets))))
ifneq ($(obj-dirs),)
$(shell mkdir -p $(obj-dirs))
endif



PHONY += FORCE
FORCE:

.PHONY: $(PHONY)
.PRECIOUS: $(PRECIOUS)
