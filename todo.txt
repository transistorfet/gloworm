

* figure out why signals are broken, this is where `sh` will exit instead of supressing the signal with custom handler

* it looks like most of duplicate_memory and copy_stack are arch agnostic since it's copying what was made during program loading,
  and program loading is generic because it's just doing what the binary format is
* the arch specific stuff is the assumptions made in memory_map_move_sbrk and memory_map_insert_heap_stack

* if you split the memory_object when remapping instead of refcounting, and only use the refcounts for cloning a segment when no-MMU
  forking then you can remove the mem_start and mem_length fields, since you'll be able to free the pages separately.  You can only
  split a memory_object if it only has one refcount though, or else you'd have to find the others, so this might not actually work

* should you change the memory resize code to use mmap/unmap instead of resizing?  That would make it easier to add the MMU table
  changes, although... now that I think about it maybe I don't need to remap them, since they'd be pointing to anonymous memory in
  the case of the heap and stack

* fix the incorrect process size in the ps command

* re-adjust the syscall numbers, which will be a breaking change and I'll need to update my compactflash card

* need to make language consistent, duplicate vs clone vs something better?  alloc vs ?  make_ref vs clone? free vs release?

* [this needs to be tested] allow stack to be NULL when calling clone (which makes it behave like fork)
* when growing the heap, we don't ensure that we only grow by PAGE_SIZE increments, so it's possible that a page could remain
  unfreed in the middle of the segment


* why does malloc "out of memory" cause the OS to lock up instead of just terminating the process?

* send doesn't work because when it switches to not ICANON and not ECHO, the process is suspended and never wakes up

* threadtest is failing to execute, possibly because the transfer fails, but the output is really weird.  It calls load_binary many
  many times, and then fails because there's too many open files, and this happens before the process even runs, so it's either a
  bug in the loading/exec code that isn't triggered by a normal program, or there's a problem with the transfer and it's corrupted


* try to optimize the memory map code?  Can you simplify the three allocated structs that make up the memory map?


* should you move memory.c into mm/ instead of proc/


* add mmu mapping to memory_map
* make it possible to set up the virtual address space differently with MMU enabled, when loading a binary


* there needs to be a way to get the bufs themselves from a file, only for the MMU model, so it can map those pages directly into
  memory without duplicating them

* bug: running cat on a directory in /proc makes it crash to the monitor

* add flags to kmalloc?
* add usp, mmu table to context and switch
* allocate per-thread kernel stack if CONFIG_USER_MODE is defined

* make a macro for alloc_contiguous vs alloc_single, such that if CONFIG_MMU then single otherwise contiguous
* make kmalloc use the page-based memory for alloc
* make kmalloc use multiple different allocators under the hood, including a bitmap-based allocator for small sized objects, like < 64 bytes
  then it uses a slab-like allocator with bitmaps for at least common sizes of 16, 24, 32, 48, 64
* go through things that use fixed-size tables and make them use kmalloc, or at least use kmalloc for the table itself, with resizing

* see if using memset more, instead of manual initialization reduces code size
* see if changing queues, ringbuffer, etc to non-inline functions reduces code size
* make it possible to get a really small memory-usage kernel, at least with specific configurations

* should you split the context switch so that it doesn't change the kernel stack unless needed, and then the full context switch can happen
  much later inside the kernel?  I have a feeling I'd need to refactor how locks work in order to make this feasible

* I'm thinking of moving the network interface drivers to drivers/ under net/ similar to linux, which would keep all the drivers in one place
  it works because each thing under drivers/ is moving towards being a subsystem with custom drivers
* as part of this, block drivers would have their own block-specific driver interface, and tty would be the character device interface
* I don't know how the device driver interface in the file system would work with this
* as part of this, it's possible that bufcache could move to the block driver subsystem code

* can you reduce memory usage in the memory map tables by reducing how many different pieces are allocated?
* can you make some of the memory usage and advanced features compile-time selectable, to accomodate systems with lots of memory and
  very little memory?

* implement mmu/tables
* convert proc/user memory to use pages
* convert bufcache/disk blocks to use pages
* convert fs vnodes to use pages
* convert net packets to use pages
* do you need a slab allocator for vnodes/packets?

* should you change DISABLE_INTS to DISABLE_IRQS(), etc
* there's an issue with extra-y, and whether to add the prefix or not
* make it rebuild everything when the config file changes
* make it rebuild things when a dependency has changed (the only way I think is to make it visit every directory, even though it looks noisey)

* should you have a kernel stack per task? yes, but only when using usermode, and fix user mode work in the process

* add threads
* add virtual memory
* add new types of locks
* continue the arch separation, make sure all process and signal stuff that's arch-specific/assumptuous is moved into arch

* make the tty sub-drivers more integrated into the tty parent driver, to make it easier to swap out.  Put common stuff in kernel/drivers/tty.h
* make the slip's tty device configurable

* fix the issue with Makefile.build where it needs to run make before running make bare-tests
* the process should wait until all output is flushed before it can exit

* figure out why moving or adding new values before the memory map in the process struct causes weird behaviour
* there is a problem compiling without optimizations where the libc none has fwrite inside of it, from the library I think, so either it's
  building the library incorrectly and including the wrong object files due to the double compilation, or... something else I don't know

* add configuration for base address in linker script
* make it so the ata device will time out and fail instead of hanging when it doesn't work

* omg write so much documentation.  This needs documentation, and autodoc building.  What's the C standard (ish, defacto?) for doc comments

* add ext2 support
* support minixfs 2 and 3?


Operating System:

    * implement the shadow memory solution from Minix/Fuzix for the issue of forking processes without MMU, where the addresses are
      not patched and point to the old processes memory space.  Both OSes copy a shadow data segment into the parent process's
      memory segments so that the process will see its own data instead of sharing data with the parent.  Since most processes that
      fork also exec shortly after, it's not a particularly pressing concern, but would make things like kermit usable, and maybe
      generic /bin/sh implementations

    * make use of 68k's supervisor and user mode. This requires major changes to the create_context since the entry point can't be put onto the user stack. RTE will pop the ret off the supervisor stack
    * do you need to disable triggering of the device-indepedent tty bottom half when the serial device is opened directly?
    * should there be a lighter weight task type, instead of processes, so that you can service interrupt processing without a bunch of wasted memory

    * something is causing the SLIP serial port to mess up somehow which requires restarting the PC side the setup, It's probably a null characters when turning the device on or off
    * make the tty68681 driver partially write data... right now it'll suspend if the full request can't be buffered, but it should return the partial number, and the read/write syscalls should do
      the actual blocking, and then for writing it can rewrite the syscall during the suspend, so that it'll restart in the proper position.  You then need to add resuming to tty
    * when there's a trailing / to rm or mkdir, it will create something weird

    * add dynamic linking so that you can have a shared libc

    * it's hacky, but the two create directory things work for now.  I'd like to fix the libc one, I guess by properly converting the whole thing to the new build system?
    * should you replace the libc makefile with subdirs like the kernel?
    * make a better clean rule?
    * add select-config rule to copy existing config?

    * add timers and retransmissions to tcp
    * try transfering files over tcp, to test the stability of TCP (it should be possible to `nc -l 3904 > tar -x` or something to transfer data)
    * make checksum command for file integrity
    * add a read only mounting mode, such that you know you wont need to sync while also not messing up the CF card
    * should there be something that periodically syncs data to disk?
    * need a function to convert a device number into a device name or device file path. (Could add another driver function pointer for getting the name of a devnum) (add to /proc/mounts)
    * I don't really like the point-of-no-return code in execve().  Is there a way to ensure that wont happen, such as not overwriting the memory segments until the new process is loaded
    * add calculating of cpu runtime


    * add check to vfs_link() for loops
    * should there be a vnode op to fill in the statbuf struct, or should they be in the vnode?  The only 2 values not in the vnode are blksize, blocks
    * the directory size value in the inode isn't working the best.  There is no dir size shrinking yet either
    * split the boot loader up into multiple parts, so it can be stage loaded
    * how can you make a df command to list how many blocks are free??  That info would need to come from the minix fs-specific code
    * need to set the ctty in the init process somehow (other systems set it as a special case when opening a tty)
    * signals like SIGTTOU are supposed to be sent sometimes instead of returning success or failure
    * do you need to implement some internal network routing?

    * should you rename vfs_clone_vnode/vfs_release_vnode to instead be vfs_clone_vnode_ref/vfs_drop_vnode_ref ??  The latter would make more sense, albeit be longer
    * you could possibly make an abstracted packet construction thing using an ioctl-like function defined for each protocol, which can intercept parts of
      the requests to fill in data in the packet headers (set src address, set dest address, add id, etc)
    * should you separate libc, kernel, and monitor into their own subproject directories with the include files separated?  Each could use the same build system and
      config system, maybe with some modifications so that CCFLAGS can be defined for a whole subdirectory for the project-specific includes.  It would make it easier
      to use only parts of it, like use libc in other projects, or take just the kernel (monitor doesn't have its own includes outside of itself, so it isn't so relevant)

    * implement dns
    * add pipe setup to command evaluation
    * add the & (run in background) option to the shell
    * add support for * in shell
    * make a simple web server
    * add fifos (should be easy now)
    * implement unix domain sockets
    * add stack guard protection
    * implement login system (setuid)
    * implement fcntl
    * implement symlinks in minixfs
    * optionally implement ftell, fgetpos, fsetpos
    * can you implement some kind of terminal switching, like alt-F* keys... It would have to be more like `screen`
    * make a /dev/flash0 device or /dev/rom0 device in the mem.c driver, possibly even with a partition table and bootloader, that can be mounted read only
    * port some kind of interpreter, like scheme
    * try porting a simple command, and then something more complex, maybe awk or something as a big target

    * implement fg/bg somehow... it would be builtin to the shell and would require job control stuff...
    * add commands: rmdir, dd, chown, grep
    * add up/down arrow processing to the shell (easy without cooked input, but how would it be done with...)
    * implement shell scripting?
    * add some kind of debugging or tracing support
    * make a PIE format that can be loaded and executed (this will likely require a custom linker script)



    * should you add timestamps to packets? (not currently a use for it)
    * rewrite the math functions to use fewer registers, and cover the 32 bit divide by 32 bit number case
    * minixfs, implement versions 2 and 3
    * implement links for mallocfs
    * should you refactor the header files in minixfs implementation into actual c files, with a common header to declare the functions?
    * do you need to add variable sized buffers/blocks into bufcache? (yes)
    * can you change the fd allocator, such that calling it twice will return 2 different fds, even though they aren't reserved until set
      (ie. store the last allocated fd, but it has to be in the process struct)


    * remove the execbuiltin syscall, which is temporary until all commands can be executable files


    * there is an issue running the shell on linux related to the setting the process group
    * could you use the queue node to add procs to a free list, instead of iterating over all the procs when creating a new one
    * the return from syscalls is sometimes generating a move %d0, %d1; move %d1, %d0
    * re-evaluate file permissions checks to make sure they're correct according to posix
    * you need some tests, but ideally it would use a simple emulator.  Maybe easy68k or something could be used
    * It *might* be possible to defer the context save until you're certain a reschedule is needed just before exiting, but it would require being very careful during the stack swap

    * as a note about terminology for pseudoterminals, pts/ptm (slave/master);  it would make more sense for them to be named process-end and device-end, which implies
      the expected interface to each.   A user process will open the process-end terminal device and communicate with it like any tty.  The emulator or whatever would
      connect to the other end and act as if it were a terminal device, in place of what would be an actual I/O device like RS-232 or a hardwired keyboard.  I guess the
      abbreviations might be /dev/ptpX and /dev/ptdX?


Monitor:

    * failure vectors don't point to the correct addresses, from the looks of it

    * can you have an debugger in the monitor software?  There are trap and breakpoint instructions in the processor for debugging, so if you define an interrupt handler
      for those, you could have it enter a debugger, that possibly allows single stepping?  I'm not sure how to implement that


