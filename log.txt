
2023-08-07:
- I moved the OS out of the computie repository and into its own, with the git history preserved
- It will now be known as gloworm, named after the 1980s toy, since my Rust OS was already named Ruxpin after Teddy Ruxpin, so I
  tried to stick to the same theme

2025-01-31:
- the previous time I was working on in this repository was November/December 2023 when I tried to get the monitor and kernel
  compiled in clang, and booted it using Moa.  I ran into the common bug where the MOVEA instruction is assumed to set the flags
  register, but it's the one exception where the flags don't get updated, so a comparison doesn't work.  And it usually affects the
  fputs implementation causing it to print all of memory starting with the welcome message, but never terminating at the null
  character.  I never got around to submitting a bug report
- I've started working on this again since Christmas when I built the k30p-VME, MemBird Woodcock, and CF Card.  I added some commands
  to the monitor to test the VME bus accesses, and test the CF card, and I've since managed to get the kernel booting on the k30p
  and run the network stack

2025-02-01:
- I've been trying to add a config system so that it's easier to conditionally compile things, and linux's config system looks
  simple.  I could try to learn cmake and/or ninja or something, but then anyone building it would have to install those too, and
  they don't look too straightforward for the kind of config I'd like
- Kconfig uses a simple file format for describing config settings and their relations, which generates a single file with all the
  config settings in them.  The config programs are distributed with debian, so they don't have to be included here, and even then,
  the output config file with eg. `CONFIG_M68K=y` is easily human readable and modifiable, it's valid make and bash syntax, can be
  parsed easily.  You do have to make sure the dependecies are satisfied when editing the output by hand, but that's minor.
- A question is whether it's best to try to match the linux config item names, or whether to change some names, like BLK_DEV_RAM
  calling RAMDISK or something instead.  It probably doesn't matter much since I'll eventually write Kconfig files with
  descriptions
- linux seems to not use very many non-bool config items, which makes sense, but I'm thinking of using many more if I can, for
  parameters like device sizes and maybe address offsets for I/O register addresses.  I can't seem to find where linux configures
  those, if it has them configurable at all.  For a lot of systems, they'd all be in the same location, but for me, the ATA device
  on computie is 0x600000 but on computie-vme with the COMET CF Card, it's 0xff800000 or anything in the 0xffxxx000 range I think

2025-02-04:
- there's a lot of issues to fix, but it at least seems to be compiling the kernel and the monitor enough to boot them
- it turns out I was looking in tools/build/Makefile.build in the linux source, but it was scripts/Makefile.build that has the
  more complex build system, which has multiple special variables for targets, and it treats them somewhat specially, so I figured I
  should do the same so I have more control over what gets built how instead of over-generalizing
- I added the userprogs variable with pretty much the same rules to separate out single source file programs from multi-file ones,
  but I haven't tested the multi one yet
- it's building the final step when it shouldn't, and I still need to add the libc makefiles

2025-02-07:
- finally get the new build system implemented.  I had to make some special cases with subdir-y and others to make it build the
  right things, or else it would get confused by too many generic rules.  I still don't have it stripping the binaries for the
  commands yet, but that will come soon

2025-02-08:
- I brought out the k30 and 68k-SMT boards to test the builds on those.  Initially, neither board wanted to boot up.  After a while
  of trying, I finally got the 68k-SMT to run, but it was getting a lot of mistaken characters, not entirely garbage but adacent
  lower case letters, so I guess it was the lower data bits that were getting corrupted occasionally.  It seemed to run ok, printing
  the help text and such, but the characters printed and received were wrong, so maybe something localized to the serial controller
  or FTDI
- the k30-SBC just wouldn't do anything, and then it would print the welcome message but not the prompt, and then it would print the
  prompt but not accept characters, and then it would accept characters but hang when enter was pressed.  Finally I tried a
  different USB port instead of the one on the monitor stand, I used the one connected by the USB3 type-A extension cable and it
  worked
- I was eventually able to get both builds of the kernel and monitor running on them with the ATA drivers using the CONFIG_ATA_BASE
  select as the only difference, so the new build system should work with those boards

2025-02-16 [from retroverse logs]:
- I'm kind of getting sidetracked now, I tried to compile the kernel without -O3 in order to test if the optimizations are causing a
  problem, after reading in the computie logs that I had to add a volatile to strlen in order to get the monitor working previously
  because otherwise it was hanging.  It's very possible a similar thing is happening here with the kernel, so I thought it would be
  quick to check, but then I ran into a problem with undefined fwrite, which is almost certainly related to the wrong object files
  being added to the lib because it compiles both versions of libc.  The only place that fwrite exists that would cause the
  undefineds is in fputs, which is used by fputs in os/ but not in none/
- I compiled it with just the kernel and it worked without errors because it was monitor that had the problem
- trying to load it over serial caused the k30 to reset and run the monitor and start printing out the data instead of reading it
  in.  It was working before I used the unoptimized kernel.  *sigh*  I feel like I had this recently with one of the 3 boards I've
  been playing with
- ok I just checked and it's 100% because the kernel overflows the size that the load script handles (16-bit length) so it loads the
  first ~0x1800 bytes and then boots, but there's more data to send, so I need to keep that in mind now that I have such a big
  kernel.  I could modify the format to use a 4 byte number instead, but I guess I'd have to upgrade the roms on the other boards?
  I'd rather not use a backwards compatible mechanism.

2025-02-17:

- when it works, it switches to the command process and runs that for a while, and before it finishing writing its output, it exits
  and switches to the shell process to handle the exit code, and then to idle again, which switches a couple of times before the
  command's output finishing printing.  It would seem odd that it doesn't have to flush the output before the process exits...
- when it doesn't work, it switches from the command process to the idle process without going through the shell process, and
  the suspend_proc call is made, so it's suspending without exiting.  One of the cases had it switch back to the same command
  process once, before switching to the idle process on the next timer interrupt
- it's calling suspend from the tty write function, which is really just a pass through to the 68681 driver. I don't know why it
  doesn't suspend in 68681 when the only way it could return 0 is if it suspends, but either way, it's not waking up after the
  buffer clears
- it honestly doesn't look hard to add a resume check for tx to the bottom half, or a flush function.  You should make one anyways
  to wait for output to be send before exiting.  I think that comment about never waking up in pipe either was more specifically
  about writing more than the total buffer at once rather than just remaining buffer, or it was before i had the bh stuff. I want
  to clean up the various parts of that

2025-02-18:

- an extra print statement shows it does return 0 like normal from tty_68681_write but it skips the suspend step because O_NONBLOCK
  is set, probably to make the tty driver work correctly, which is why tty_write is the one that suspends.  Either way, it should be
  possible to add a resume
- I added a very quick "if buf not full then call resume_suspended_procs" to the bottom half handler of the tty68681 driver.  At
  first I added one that passes in the tty68681 major device number, and that didn't work because it's the tty driver that suspends,
  but adding a second call that passes in the tty major fixed it up a treat.  It can now print the entire bin listing, suspending at
  least twice during the process, but being woken up both times once the buffer is empty.  So that was the entire problem with the
  listing hanging
- I don't know why I didn't do it earlier.  Maybe I just didn't like doing a double call to resume and wanted to instead put it in
  the tty driver.  It is true that's it's not the most clean, but it's not that unusual since the tty68681 driver is really a
  subdriver of the tty subsystem.  Maybe there's a cleaner way, but at least it doesn't hang anymore

2025-02-22:

- I finally got a refactor done that I had thought would be quick, but ended up taking me 2 days or so.  Even though the standard
  libc and unix are codependent, I kind of had hoped to separate the kernel arch includes from the libc ones, and went back and
  forth a bit, but eventually settled on having src/libc/arch/<arch>/include, and src/kernel/arch/<arch>/include rather than putting
  them together in include/.  I know the existing libc and kernel includes are mixed together, but it's only kernel stuff in
  include/kernel/ and the rest is libc.  Then again I'm still having my doubts
- I also changed the byteorder to_le16, etc functions into endian.h htole16, etc which is posix standard, so the things that use it
  will be more portable to another libc, which might be wanted in some cases
- also using the libc none with other baremetal code easily without needing the kernel

- I also fixed some build issues.  The CFLAGS weren't applying to all downstream directories like I wanted, and I also needed to
  refactor the arch-specific ones so I make a bunch of minor changes.  CFLAGS works now because it doesn't get overwritten in the
  Makefile.defaults file on every decent, and ccflags-y works only for the current directory
- I also added a userprog-ccflags-y, firmware-ccflags-y, and kernel-ccflags-y, which are activated by the respective directory's top
  level Makefile by transfering it to CFLAGS.  The idea is that anything in those categories should get certain general flags that
  are architecture-specific like `-mpcrel` which applies to monitor and boot (firmwares), but not userprogs or the kernel.

